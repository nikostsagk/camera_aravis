#!/usr/bin/env python

PACKAGE='camera_aravis'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

expgain_enum          = gen.enum([gen.const("Exp_Gain",             str_t, "Exposure_Gain_Iris",        "Use Exposure/Gain order"),
                                   gen.const("Gain_Exp",            str_t, "Gain_Exposure_Iris",        "Use Gain/Exposure order") ],
                                 "Exposure_Gain or Gain_Exposure")
onoff_enum          = gen.enum([gen.const("Off",                    str_t, "Off",        "Off"),
                                gen.const("On",                     str_t, "On",         "On") ],
                                "On or Off")
activ_enum          = gen.enum([gen.const("Off__",                  str_t, "Off",        "Off"),
                                 gen.const("Active",                str_t, "Active",     "Active") ],
                                "Active or Off")
auto_enum           = gen.enum([gen.const("Off_",                   str_t, "Off",        "Use Manual Settings"),
                                gen.const("Once",                   str_t, "Once",       "Recalc Once"),
                                gen.const("Continuous",             str_t, "Continuous", "Recalc Continually") ],
                                "Automatic Settings")
acquisitionmode_enum = gen.enum([gen.const("Continuous_",           str_t, "Continuous",  "Capture continuously upon trigger."),
                                gen.const("SingleFrame",            str_t, "SingleFrame", "Capture one frame upon trigger."),
                                gen.const("MultiFrame",             str_t, "MultiFrame",  "Capture multiple frames upon trigger.")],
                                "AcquisitionMode")
triggersource_enum  = gen.enum([gen.const("Software",               str_t, "Software",  "FrameStart triggered via software"),
                                gen.const("Line1",                  str_t, "Line1",     "FrameStart triggered via hardware input 1"),
                                gen.const("Line2",                  str_t, "Line2",     "FrameStart triggered via hardware input 2") ],
                                "TriggerSource")
binning_enum  = gen.enum([gen.const("Full",                         str_t, "Full",      "capture full size image"),
                                gen.const("Half",                   str_t, "Half",      "capture half size image (uses binning)")],
                                "BinningMode")

gen.add("Acquire",                    bool_t,   0,  "Acquire",                                                      True)
gen.add("AcquisitionMode",             str_t,   0,  "Acquisition Mode",  "Continuous",  edit_method=acquisitionmode_enum)
gen.add("AcquisitionFrameRate",     double_t,   0,  "Framerate (fps)",                                     15.0, 0, 1000)

gen.add("autoBrightnessMode",                       str_t,   0, "Sets the mode for the Auto-Brightness function.",        "Off",   edit_method=activ_enum)
gen.add("autoBrightnessSequence",                   str_t,   0, "Specifies the processing order for the auto-brightness algorithm. Gain and Exposure are adjusted sequentially, in the selected order, to achieve the auto-brightness target value. If the Gain or Exposure features are not available or disabled, that feature is ignored in the processing sequence.",        "Exposure_Gain_Iris",   edit_method=expgain_enum)
gen.add("autoBrightnessTarget",                     int_t,   0, "Sets the target image grayscale value, in DN, for the auto-brightness algorithm. Features that use auto-brightness include ExposureAuto, and GainAuto.",                 128,  0, 255)
gen.add("autoBrightnessTargetRangeVariation",       int_t,   0, "Sets the auto-brightness target Range Variation in (DN). An autoBrightnessTarget value within this range is considered valid and will not be compensated. ",    16,  0, 255)
gen.add("autoBrightnessAlgoMinTimeActivation",   double_t,   0, "Specifies the time delay between an image Brightness change from the autoBrightnessTarget and when compensation of Gain/Exposure starts. This eliminates repetitive adjustments of short term Brightness variations.",    1,  0,  16)
gen.add("autoBrightnessAlgoConvergenceTime",     double_t,   0, "Specifies the maximum time the autoBrightnessAlgorithm is allowed to compensate the image brightness as defined by the autoBrightnessTarget.",      2, 0.1, 16)

gen.add("ExposureAuto",                   str_t,   0, "Sets the automatic exposure mode when the ExposureMode feature is set to Timed. ", "Continuous",  edit_method=auto_enum)
gen.add("ExposureTime",                double_t,   0, "Sets the exposure time (in microseconds) when the Exposure Mode feature is set to Timed.",                    1500.0, 20.0, 10e6)
gen.add("exposureAutoMinValue",  double_t,   0, "Sets the minimum exposure time value allowed by the user, in microseconds, for the Auto-Exposure function.",   500,   20.0, 30e3)
gen.add("exposureAutoMaxValue",  double_t,   0, "Sets the maximum exposure time value allowed by the user, in microseconds, for the Auto-Exposure function", 30000,   20.0, 16e6)

gen.add("GainAuto",               str_t,    0, "Controls the state of the automatic gain control.",                                "Off", edit_method=auto_enum)
gen.add("Gain",                double_t,    0, "Sets the selected gain as an amplification factor applied to the image.",             1.0, 1.0, 251.18)
gen.add("gainAutoMinValue",  double_t,    0, "Sets the minimum gain multiplier value for the automatic gain algorithm. The automatic gain function is an amplification factor applied to the video signal to obtain the auto-brightness target value. ",   1, 1, 4)
gen.add("gainAutoMaxValue",  double_t,    0, "Sets the maximum gain multiplier value for the automatic gain algorithm. The automatic gain function is an amplification factor applied to the video signal to obtain the auto-brightness target value",   4, 1, 4)

gen.add("BlackLevel",          double_t,    0, "Controls the black level as an absolute physical value. This represents a DC offset applied to the video signal, in DN (digital number) units. The Black Level Selector feature specifies the channel to adjust.",   1, 0, 4095)

exit(gen.generate(PACKAGE, "camera_aravis", "CameraAravisDalsa"))

