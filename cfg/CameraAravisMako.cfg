#!/usr/bin/env python

PACKAGE='camera_aravis'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

onoff_enum          = gen.enum([gen.const("Off",                    str_t, "Off",        "Off"),
                                gen.const("On",                     str_t, "On",         "On") ],
                                "On or Off")
auto_enum           = gen.enum([gen.const("Off_",                   str_t, "Off",        "Use Manual Settings"),
                                gen.const("Once",                   str_t, "Once",       "Recalc Once"),
                                gen.const("Continuous",             str_t, "Continuous", "Recalc Continually") ],
                                "Automatic Settings")
acquisitionmode_enum = gen.enum([gen.const("Continuous_",           str_t, "Continuous",  "Capture continuously upon trigger."),
                                gen.const("SingleFrame",            str_t, "SingleFrame", "Capture one frame upon trigger."),
                                gen.const("MultiFrame",             str_t, "MultiFrame",  "Capture multiple frames upon trigger."),
                                gen.const("Recorder",           str_t, "Recorder",  "Capture continuously to on-board FIFO buffer and send upon AcquisitionRecord trigger.")],
                                "AcquisitionMode")
auto_alg_enum          = gen.enum([gen.const("Mean",                    str_t, "Mean",        "Mean"),
                                gen.const("FitRange",                     str_t, "FitRange",         "FitRange") ],
                                "Mean or FitRange")

gen.add("AcquisitionMode",         str_t,    0, "Acquisition Mode",     "Continuous", edit_method=acquisitionmode_enum)
gen.add("AcquisitionFrameRateAbs", double_t, 0, "Framerate (fps)",    20.0, 5.0, 35.0)

gen.add("ExposureTimeAbs",         double_t, 0, "Exposure time (us)",   2000.0, 100.0, 85e6)
gen.add("ExposureAuto",            str_t,    0, "Automatic exposure",   "Continuous", edit_method=auto_enum)
gen.add("ExposureAutoAlg",         str_t,    0, "Automatic exposure Algorithm",   "Mean", edit_method=auto_alg_enum)
gen.add("ExposureAutoAdjustTol",   int_t,    0, "Tolerance in variation from ExposureAutoTarget (%)",   5, 0, 50)
gen.add("ExposureAutoOutliers",    int_t,    0, "The total pixels from top of the distribution that are ignored by the auto exposure algorithm (0.01%, 1000=10%)",   0, 0, 1000)
gen.add("ExposureAutoTarget",      int_t,    0, "The general lightness or darkness of the auto exposure feature; specifically the target mean histogram level of the image (%)",   50, 0, 100)
gen.add("ExposureAutoMin",         int_t,    0, "The lower bound to the exposure setting in auto exposure mode (us)",   50, 50, 100000)
gen.add("ExposureAutoMax",         int_t,    0, "The upper bound to the exposure setting in auto exposure mode (us)",   35000, 10000, 85000000)

gen.add("Gain",                double_t, 0, "The gain setting applied to the sensor (dB)",   0.0, 0.0, 40.0)
gen.add("GainAuto",            str_t,    0, "Automatic gain",   "Continuous", edit_method=auto_enum)
gen.add("GainAutoAdjustTol",   int_t,    0, "Tolerance in variation from GainAutoTarget (%)",   5, 0, 50)
gen.add("GainAutoOutliers",    int_t,    0, "The total pixels from top of the distribution that are ignored by the auto gain algorithm (0.01%, 1000=10%)",   0, 0, 1000)
gen.add("GainAutoTarget",      int_t,    0, "The general lightness or darkness of the auto gain feature; specifically the target mean histogram level of the image (%)",   50, 0, 100)
gen.add("GainAutoMin",         double_t,    0, "The lower bound to the gain setting in auto gain mode (us)",   0, 0, 40)
gen.add("GainAutoMax",         double_t,    0, "The upper bound to the gain setting in auto gain mode (us)",   40, 0, 40)

gen.add("DSPSubregionLeft",    int_t,    0, "Defines the left edge of the ROI for auto algorithms (pixel ID)",   0, 0, 2063)
gen.add("DSPSubregionTop",     int_t,    0, "Defines the Top edge of the ROI for auto algorithms (pixel ID)",   0, 0, 1543)
gen.add("DSPSubregionRight",   int_t,    0, "Defines the Right edge of the ROI for auto algorithms (pixel ID)",   2063, 0, 2063)
gen.add("DSPSubregionBottom",  int_t,    0, "Defines the Bottom edge of the ROI for auto algorithms (pixel ID)",   1543, 0, 1543)

exit(gen.generate(PACKAGE, "camera_aravis", "CameraAravisMako"))
